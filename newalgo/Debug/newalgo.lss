
newalgo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f3  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010c  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_PWM>:
volatile uint8_t mode = 0;

volatile uint8_t brightness = 0;

void init_PWM() {
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); // Fast PWM, non-inverting mode
  90:	84 b5       	in	r24, 0x24	; 36
  92:	83 68       	ori	r24, 0x83	; 131
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // Prescaler: 64 // Set initial PWM duty cycle to 0
  96:	85 b5       	in	r24, 0x25	; 37
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	08 95       	ret

0000009e <disable_PWM>:
}

void disable_PWM() {
	// Clear COM0A1 and WGM00 bits in TCCR0A to disable PWM output
	TCCR0A &= ~((1 << COM0A1) | (1 << WGM00));
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	8e 77       	andi	r24, 0x7E	; 126
  a2:	84 bd       	out	0x24, r24	; 36
	
	// Clear CS01 and CS00 bits in TCCR0B to stop the timer
	TCCR0B &= ~((1 << CS01) | (1 << CS00));
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	8c 7f       	andi	r24, 0xFC	; 252
  a8:	85 bd       	out	0x25, r24	; 37
  aa:	08 95       	ret

000000ac <setup>:

volatile uint8_t count = 0;

void setup()
{
	DDRB |= (1 << LED1_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN) | (1 << LED4_PIN);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << BCD_PIN_1) | (1 << BCD_PIN_2) | (1 << BCD_PIN_3) | (1 << BCD_PIN_4);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << SSD_Pin);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PWM_PIN);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON_PIN_1);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON_PIN_2);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << Mode_Pin);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << Mode_Pin); //enabling the pull up resistor
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON_PIN_1);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON_PIN_2);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret

000000ea <isSwitchPressed>:

uint8_t isSwitchPressed() {
	// Check the status of the SWITCH_PIN (bit 1 in PIND register)
	// 0 means the switch is pressed because of the pull-up resistor
	// 1 means the switch is not pressed (external pull-up resistor required)
	return (PIND & (1 << Mode_Pin));
  ea:	89 b1       	in	r24, 0x09	; 9
}
  ec:	82 70       	andi	r24, 0x02	; 2
  ee:	08 95       	ret

000000f0 <isSwitchincrease>:
uint8_t isSwitchincrease() {
	// Check the status of the SWITCH_PIN (bit 1 in PIND register)
	// 0 means the switch is pressed because of the pull-up resistor
	// 1 means the switch is not pressed (external pull-up resistor required)
	return (PIND & (1 << BUTTON_PIN_1));
  f0:	89 b1       	in	r24, 0x09	; 9
}
  f2:	84 70       	andi	r24, 0x04	; 4
  f4:	08 95       	ret

000000f6 <isSwitchdecrease>:
uint8_t isSwitchdecrease() {
	// Check the status of the SWITCH_PIN (bit 1 in PIND register)
	// 0 means the switch is pressed because of the pull-up resistor
	// 1 means the switch is not pressed (external pull-up resistor required)
	return (PIND & (1 << BUTTON_PIN_2));
  f6:	89 b1       	in	r24, 0x09	; 9
}
  f8:	88 70       	andi	r24, 0x08	; 8
  fa:	08 95       	ret

000000fc <clearBitInPortD>:
void clearBitInPortD(uint8_t bitPosition) {
	// Check if bitPosition is valid (0-7)
	if (bitPosition >= 0 && bitPosition <= 7) {
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	68 f4       	brcc	.+26     	; 0x11a <clearBitInPortD+0x1e>
		// Create a mask with all bits set to 1 except for the bit at the given position
		//if it ssd common anode set to high not inverse it
		uint8_t mask = ~(1 << bitPosition);
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	a9 01       	movw	r20, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <clearBitInPortD+0x10>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <clearBitInPortD+0xc>
 110:	ca 01       	movw	r24, r20
 112:	80 95       	com	r24
		
		// Perform bitwise AND with the mask to clear the bit at the given position
		PORTD &= mask;
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	89 23       	and	r24, r25
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	08 95       	ret

0000011c <main>:
	}
}
int main(void)
{
	setup();
 11c:	0e 94 56 00 	call	0xac	; 0xac <setup>

	// Initialize Timer1 for button debouncing
	while (1)
	{
		if ((isSwitchPressed())) {
 120:	0e 94 75 00 	call	0xea	; 0xea <isSwitchPressed>
 124:	88 23       	and	r24, r24
 126:	71 f0       	breq	.+28     	; 0x144 <main+0x28>
			// Switch is pressed, do something
			// For example, you can toggle an LED connected to another pin
			// Assuming the LED is connected to PB0:
			mode ++;
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	82 e5       	ldi	r24, 0x52	; 82
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x26>
 142:	00 00       	nop
			_delay_ms(150);
			// Add a small delay to avoid rapid toggling due to switch bouncing
		}
		if((isSwitchincrease()))
 144:	0e 94 78 00 	call	0xf0	; 0xf0 <isSwitchincrease>
 148:	88 23       	and	r24, r24
 14a:	a1 f0       	breq	.+40     	; 0x174 <main+0x58>
		{
			count++;
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	80 e7       	ldi	r24, 0x70	; 112
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x40>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x4a>
 166:	00 00       	nop
			_delay_ms(50);
			if (count > 9){
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	8a 30       	cpi	r24, 0x0A	; 10
 16e:	10 f0       	brcs	.+4      	; 0x174 <main+0x58>
				count=0;
 170:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}	
		}
		if((isSwitchdecrease()))
 174:	0e 94 7b 00 	call	0xf6	; 0xf6 <isSwitchdecrease>
 178:	88 23       	and	r24, r24
 17a:	b1 f0       	breq	.+44     	; 0x1a8 <main+0x8c>
		{
			count--;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	81 50       	subi	r24, 0x01	; 1
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	80 e7       	ldi	r24, 0x70	; 112
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x70>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x7a>
 196:	00 00       	nop
			_delay_ms(50);
			if (count == -1){
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
				count=9;
			}
			if (count > 9){
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <main+0x8c>
				count=0;
 1a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		
		if ((mode%3)==0){
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 1ac:	8b ea       	ldi	r24, 0xAB	; 171
 1ae:	98 9f       	mul	r25, r24
 1b0:	81 2d       	mov	r24, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	86 95       	lsr	r24
 1b6:	28 2f       	mov	r18, r24
 1b8:	22 0f       	add	r18, r18
 1ba:	82 0f       	add	r24, r18
 1bc:	98 13       	cpse	r25, r24
 1be:	0d c0       	rjmp	.+26     	; 0x1da <main+0xbe>
			disable_PWM();
 1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <disable_PWM>
			PORTB = (count & 0x0F);
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	85 b9       	out	0x05, r24	; 5
			PORTC = (0x00);
 1cc:	18 b8       	out	0x08, r1	; 8
			PORTD|=(1<<SSD_Pin);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << PWM_PIN);
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 7b       	andi	r24, 0xBF	; 191
 1d8:	8b b9       	out	0x0b, r24	; 11
		}
		
		if ((mode%3)==1){
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 1de:	8b ea       	ldi	r24, 0xAB	; 171
 1e0:	98 9f       	mul	r25, r24
 1e2:	81 2d       	mov	r24, r1
 1e4:	11 24       	eor	r1, r1
 1e6:	86 95       	lsr	r24
 1e8:	28 2f       	mov	r18, r24
 1ea:	22 0f       	add	r18, r18
 1ec:	82 0f       	add	r24, r18
 1ee:	98 1b       	sub	r25, r24
 1f0:	91 30       	cpi	r25, 0x01	; 1
 1f2:	61 f4       	brne	.+24     	; 0x20c <main+0xf0>
			
			disable_PWM();
 1f4:	0e 94 4f 00 	call	0x9e	; 0x9e <disable_PWM>
			clearBitInPortD(7);
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	0e 94 7e 00 	call	0xfc	; 0xfc <clearBitInPortD>
			PORTC = (count & 0xFF);
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 202:	88 b9       	out	0x08, r24	; 8
			PORTB = (0x00);
 204:	15 b8       	out	0x05, r1	; 5
			PORTD &= ~(1 << PWM_PIN);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	8b b9       	out	0x0b, r24	; 11
		}
		
		if ((mode%3)==2){
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 210:	8b ea       	ldi	r24, 0xAB	; 171
 212:	98 9f       	mul	r25, r24
 214:	81 2d       	mov	r24, r1
 216:	11 24       	eor	r1, r1
 218:	86 95       	lsr	r24
 21a:	28 2f       	mov	r18, r24
 21c:	22 0f       	add	r18, r18
 21e:	82 0f       	add	r24, r18
 220:	98 1b       	sub	r25, r24
 222:	92 30       	cpi	r25, 0x02	; 2
 224:	09 f0       	breq	.+2      	; 0x228 <main+0x10c>
 226:	7c cf       	rjmp	.-264    	; 0x120 <main+0x4>
			if (count==0){
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22c:	81 11       	cpse	r24, r1
 22e:	0e c0       	rjmp	.+28     	; 0x24c <main+0x130>
				disable_PWM();
 230:	0e 94 4f 00 	call	0x9e	; 0x9e <disable_PWM>
				PORTD|=(1<<SSD_Pin);
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	80 68       	ori	r24, 0x80	; 128
 238:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PWM_PIN);
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	8b b9       	out	0x0b, r24	; 11
				PORTB = (0x00);
 240:	15 b8       	out	0x05, r1	; 5
				PORTC = (0x00);
 242:	18 b8       	out	0x08, r1	; 8
				PORTD &= ~(1 << PWM_PIN);
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 7b       	andi	r24, 0xBF	; 191
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	6a cf       	rjmp	.-300    	; 0x120 <main+0x4>
			}
			else{
				init_PWM();
 24c:	0e 94 48 00 	call	0x90	; 0x90 <init_PWM>
				PORTD|=(1<<SSD_Pin);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PWM_PIN);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	8b b9       	out	0x0b, r24	; 11
				OCR0A = (255/BRIGHTNESS_LEVELS)*count;
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 260:	99 e1       	ldi	r25, 0x19	; 25
 262:	89 9f       	mul	r24, r25
 264:	80 2d       	mov	r24, r0
 266:	11 24       	eor	r1, r1
 268:	87 bd       	out	0x27, r24	; 39
				PORTB = (0x00);
 26a:	15 b8       	out	0x05, r1	; 5
				PORTC = (0x00);
 26c:	18 b8       	out	0x08, r1	; 8
 26e:	58 cf       	rjmp	.-336    	; 0x120 <main+0x4>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
